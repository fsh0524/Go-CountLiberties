#!/usr/bin/perl -w
# $Id: Makefile.PL 5091 2012-05-15 15:09:26Z hospelt $
use 5.008001;
use strict;
use warnings;
use Getopt::Long;
use File::Copy qw(copy);
use ExtUtils::MakeMaker;

our $VERSION = '1.000';

local %MY::postamble;
# Make these global so we can share them with any subdirectory Makefile.PLs
our ($gprof, $gcov, $sanitize_undefined, $stack_protector, $debug, $yes, $no, $help);

&Getopt::Long::config("bundling", "require_order");
die "Could not parse your command line. Try $0 -h\n" unless
    GetOptions("gprof!"		=> \$gprof,
               "gcov!"		=> \$gcov,
               "sanitize_undefined!"	=> \$sanitize_undefined,
               "stack_protector!"	=> \$stack_protector,
               "debug!"		=> \$debug,
               "y|yes!"		=> \$yes,
               "n|no!"		=> \$no,
               "h|help!"	=> \$help);

if ($debug) {
    $stack_protector = 1;
    # I Don't know how to get sanitize to work with shared libraries
    # $sanitize_undefined = 1;
}
$gprof = $gprof ? " -pg" : "";
my $lib_gcov = $gcov ? " -lgcov" : "";
$gcov  = $gcov ? " -fprofile-arcs -ftest-coverage" : "";
# I Don't know how to get sanitize to work with shared libraries
# my $lib_asan = $sanitize_undefined ? " -fsanitize=undefined -static-libasan" : "";
my $lib_asan = "";
$sanitize_undefined  = $sanitize_undefined ? " -fsanitize=undefined" : "";
$stack_protector = $stack_protector ? " -fstack-protector-strong" : " -fno-stack-protector";
# -frename-registers  seems a loss
my $optimize = $debug ?
    "-g -fno-omit-frame-pointer$gprof$gcov$sanitize_undefined$stack_protector" :
    "-g -O6 -march=native -finline-limit=100000 --param large-unit-insns=100000 --param large-function-growth=10000 --param large-stack-frame-growth=10000 -Winline -fstrict-aliasing -fno-math-errno -funsafe-math-optimizations -ffinite-math-only -ffast-math -fno-signed-zeros -fno-trapping-math$gprof$gcov$sanitize_undefined$stack_protector";

for my $file (qw(revision.cpp)) {
    next if -e $file;
    my @stat = stat("$file.in") or die "Could not stat '$file.in': $!";
    copy("$file.in", $file) || die "Could not copy '$file.in' to '$file': $!";
    utime($stat[9]-10, $stat[9]-10, $file) || die "Could not touch '$file': $!";
}
settings();

my $CC = "g++";
my $ccache;
for my $path (split ":", $ENV{PATH}) {
    if (-x "$path/ccache") {
        $ccache = "$path/ccache";
        last;
    }
}
$CC = "$ccache $CC" if $ccache;

WriteMakefile
    (NAME		=> 'Go::CountLiberties',
     VERSION_FROM	=> 'lib/Go/CountLiberties/Package.pm', # finds $VERSION
     eval {
         ## no critic (UselessNoCritic MagicNumbers)
         ExtUtils::MakeMaker->VERSION(6.55_01);
         1;
     } ? (BUILD_REQUIRES	=> {
         # Needed to build BoardMove.cpp. Maybe include in the distro
         "Text::Expand"	=>	"1.000",
         # Only for the tests
	 "Test::More"		=> "0.01",
     }) : (),
     ABSTRACT		=> 'Count Maximum liberties of a group on a Go Board',
     AUTHOR		=> 'Ton Hospel <Go-CountLiberties@ton.iguana.be>',
     CC			=> $CC,
     LD			=> '$(CC)',
     # -C++ doesn't do anything, but we need -hiertype for C++ types with ::
     XSOPT		=> "-C++ -hiertype",
     LIBS		=> [''],
     INC		=> '-I include',
     depend		=> {
         '$(O_FILES)'	=> "include/ppport.h include/constants.hpp include/vector.hpp",
     },
     DEFINE		=> $debug ? "-DDEBUG=1" : "-DNDEBUG=1",
     OBJECT		=> '$(O_FILES)',
     $^O eq "MSWin32" ? (
         PM_FILTER	=> '$(PERL) -p -e1',
     ) : (),
     clean		=> {
	 FILES => '$(DISTNAME).ppd ppm cover_db nytprof nytprof.out* md5-versions.old',
     },
);

# START MY
# autogenerated by release_pm
BEGIN {
    package MY;

    use vars qw(%postamble);

    $postamble{ppm} = <<'EOT';
ppm: $(DISTNAME).ppd
	makeppd.pl "--perl=$(PERLRUN)" --min_version=1.016 "--zip=$(ZIP)" "--tar=$(TAR)" "--compress=$(COMPRESS)" --leave=ppm "--objects=$(OBJECT)" $(DISTNAME).ppd $(VERSION)
EOT

    $postamble{ppm3} = <<'EOT';
ppm3: $(DISTNAME).ppd
	makeppd.pl "--perl=$(PERLRUN)" --min_version=1.016 "--zip=$(ZIP)" "--tar=$(TAR)" "--compress=$(COMPRESS)" --ppm_version=3 --leave=ppm3 "--objects=$(OBJECT)" $(DISTNAME).ppd $(VERSION)
EOT

    $postamble{ppm4} = <<'EOT';
ppm4: $(DISTNAME).ppd
	makeppd.pl "--perl=$(PERLRUN)" --min_version=1.016 "--zip=$(ZIP)" "--tar=$(TAR)" "--compress=$(COMPRESS)" --ppm_version=4 --leave=ppm4 "--objects=$(OBJECT)" $(DISTNAME).ppd $(VERSION)
EOT

    $postamble{ppd} = <<'EOT';
$(DISTNAME).ppd: all ppd
EOT

    $postamble{cover} = <<'EOT';
cover:
	cover -delete
	mkdir cover_db
	-HARNESS_PERL_SWITCHES=-MDevel::Cover make test
	cover
EOT

    $postamble{critic} = <<'EOT';
critic:
	perlcritic .
EOT

    $postamble{ppm_install} = <<'EOT';
ppm_install: ppm
	ppm install ppm/$(DISTNAME).ppd
EOT

    $postamble{ppm_uninstall} = <<'EOT';
ppm_uninstall:
	ppm uninstall $(DISTNAME)
EOT

undef &postamble;	## no critic (UselessNoCritic AmpersandSigils)
}
{
    package MY;
    sub postamble {
	return shift->SUPER::postamble() . join("\n", @postamble{sort {uc $a cmp uc $b || $a cmp $b } keys %postamble});
    }
}
# END MY

BEGIN {
    package MY;
    sub constants {
        my $self = shift;
        # Remove any test files
        @{$self->{O_FILES}} = grep !/^test/i, @{$self->{O_FILES}};
        # move revision.o to the end
        my @O_FILES = grep $_ ne "revision.o", @{$self->{O_FILES}};
        if (@O_FILES != @{$self->{O_FILES}}) {
            # print STDERR "Fix!\n";
            push @O_FILES, "revision.o";
            @{$self->{O_FILES}} = @O_FILES;
        }
        return $self->SUPER::constants(@_);
    }
}

sub settings {
    package MY;
    our %postamble;

    $postamble{version_check} = <<'EOF';
all ::
	$(NOECHO) $(FULLPERL) version_check "$(NAME)" "$(DESTINSTALLSITELIB)" "$(VERSION)" "$(VERSION_FROM)"
EOF

    $postamble{ppport_h} = <<'EOF';
ppport:
	$(PERLRUN) -MDevel::PPPort -e "Devel::PPPort::WriteFile(qq(include/ppport.h))"
EOF

    $postamble{ppport} = <<'EOF';
$(XS_FILES): include/ppport.h
	$(CP) CountLiberties.xs CountLiberties.xs.patched
	$(PERLRUN) include/ppport.h --cplusplus --copy .patched $(XS_FILES)
	$(PERLRUN) -e 'for (@ARGV) { local $$/; open(my $$in, "<", "$$_.patched") || die "Could not open \x27$$_.patched\x27: $$!"; my $$content = <$$in>; 1 || $$content =~ s{\Q#include "ppport.h"\E\n}{}; close($$in) || die "Error closing \x27$$_.patched\x27: $$!"; open(my $$out, ">", "$$_.patched") || die "Could not write to \x27$$_.patched\x27: $$!"; print($$out $$content) || die "Error writing to \x27$$_.patched\x27: $$!"; close($$out) || die "Could not close \x27$$_.patched\x27: $$!"; rename("$$_.patched", $$_) || die "Could not rename \x27$$_\x27 to \x27$$_\x27: $$!"; }' $(XS_FILES)
EOF

    $postamble{board} = <<'EOF';
.cpp.s:
	$(CCCMD) -S -fverbose-asm $(CCCDLFLAGS) "-I$(PERL_INC)" $(PASTHRU_DEFINE) $(DEFINE) $*.cpp

.o.S:
	objdump -lwSC $< > $@

# You can avoid the current revision check by setting environment variable
# REVISION_CHECK=0
# Only recreate revision.cpp after a commit:
# REVISION_CHECK=-1
subdirs ::
	$(NOECHO) $(FULLPERL) bin/revision_check --blib revision.cpp

.c: typemap

CountLiberties.c: typemap

EOF
    $postamble{c_flags} = <<"EOF";
CCFLAGS += -Wall -std=c++11 -std=c++1y -Wno-literal-suffix
# CCFLAGS += -Wall -std=c++11 -Wno-literal-suffix -ftree-vectorizer-verbose=1
LDFLAGS +=$gprof$gcov$lib_gcov$lib_asan
LDDLFLAGS +=$gprof$gcov$lib_gcov$lib_asan
OPTIMIZE = $optimize
EOF
}
